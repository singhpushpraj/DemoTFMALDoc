### YamlMime:BusinessCentralApplicationObject
fqName: System.DataAdministration."Reten. Pol. Filtering"
namespace: System.DataAdministration
baseKind: Interface
kind: Interface
parent: N:Module::System_Application::Namespace::System.DataAdministration
langs:
- al
seeAlso:
- '[Interface](https://learn.microsoft.com/dynamics365/business-central/dev-itpro/developer/devenv-interfaces-in-al)'
methods:
- syntax:
    content: 'procedure ApplyRetentionPolicyAllRecordFilters(RetentionPolicySetup: Record "Retention Policy Setup", var FilterRecordRef: RecordRef, var RetenPolFilteringParam: Record "Reten. Pol. Filtering Param" temporary): Boolean'
    parameters:
    - id: RetentionPolicySetup
      description: The retention policy for which filters are applied.
      parameterType:
        name: Record "Retention Policy Setup"
        isExternal: true
    - id: FilterRecordRef
      description: A RecordRef of the table on which the filters are applied.
      parameterType:
        name: RecordRef
        isExternal: true
    - id: RetenPolFilteringParam
      description: The parameter table for this run of apply retention policy.
      parameterType:
        name: Record "Reten. Pol. Filtering Param" temporary
        isExternal: true
    return:
      description: Returns true when there are expired records in the filters
      returnType:
        name: Boolean
        isExternal: true
  summary: This method is called when the retention policy applies to all records of the table. The FilterRecordRef must contain filters whe returned.
  name: ApplyRetentionPolicyAllRecordFilters
  uid: M:Interface::System#DataAdministration#Reten#_Pol#_Filtering.ApplyRetentionPolicyAllRecordFilters(Retention_Policy_Setup,RecordRef@,Reten#_Pol#_Filtering_Param@):Boolean
- syntax:
    content: 'procedure ApplyRetentionPolicySubSetFilters(RetentionPolicySetup: Record "Retention Policy Setup", var FilterRecordRef: RecordRef, var RetenPolFilteringParam: Record "Reten. Pol. Filtering Param" temporary): Boolean'
    parameters:
    - id: RetentionPolicySetup
      description: The retention policy for which filters are applied.
      parameterType:
        name: Record "Retention Policy Setup"
        isExternal: true
    - id: FilterRecordRef
      description: A RecordRef of the table on which the filters are applied.
      parameterType:
        name: RecordRef
        isExternal: true
    - id: RetenPolFilteringParam
      description: The parameter table for this run of apply retention policy.
      parameterType:
        name: Record "Reten. Pol. Filtering Param" temporary
        isExternal: true
    return:
      description: Returns true when there are expired records in the filters
      returnType:
        name: Boolean
        isExternal: true
  summary: This method is called when the retention policy defines subsets of records. The records in FilterRecordRef must be marked to indicate they are part of the union of all subsets.
  name: ApplyRetentionPolicySubSetFilters
  uid: M:Interface::System#DataAdministration#Reten#_Pol#_Filtering.ApplyRetentionPolicySubSetFilters(Retention_Policy_Setup,RecordRef@,Reten#_Pol#_Filtering_Param@):Boolean
- syntax:
    content: 'procedure HasReadPermission(TableId: Integer): Boolean'
    parameters:
    - id: TableId
      description: The ID of the table for a retention policy is defined
      parameterType:
        name: Integer
        isExternal: true
    return:
      description: Returns true if the records in the table can be read.
      returnType:
        name: Boolean
        isExternal: true
  summary: >-
    This method is used to determine whether the implementation has read permission to the table specified in TableId.

    The permissions depend on both the user and the implementation codeunit.

    If the combination of user and implementation codeunit do not have read permission to the table, the retention policy will not be applied.

    A notification will be shown on the Retention Policy Setup card.
  examples:
  - >2+

       procedure HasReadPermission(TableId: Integer): Boolean
       var
           RecRef: RecordRef;
       begin
           RecRef.Open(TableId);
           exit(RecRef.ReadPermission())
       end;
  name: HasReadPermission
  uid: M:Interface::System#DataAdministration#Reten#_Pol#_Filtering.HasReadPermission(Integer):Boolean
- syntax:
    content: 'procedure Count(RecordRef: RecordRef): Integer'
    parameters:
    - id: RecordRef
      description: A record reference.
      parameterType:
        name: RecordRef
        isExternal: true
    return:
      description: The number of records.
      returnType:
        name: Integer
        isExternal: true
  summary: >-
    This method is to count the records in the table specified in the RecRef.

    The method is only called when the base code does not have read permission to the table.
  examples:
  - >2+

       procedure Count(RecRef:RecordRef): Integer
       begin
           exit(RecRef.Count())
       end;
  name: Count
  uid: M:Interface::System#DataAdministration#Reten#_Pol#_Filtering.Count(RecordRef):Integer
commentId: O:Interface::System#DataAdministration#Reten# Pol# Filtering
summary: The Reten. Pol. Filtering interface is used to set filters on the table for which a retention policy is applied.
name: '"Reten. Pol. Filtering"'
uid: O:Interface::System#DataAdministration#Reten#_Pol#_Filtering
