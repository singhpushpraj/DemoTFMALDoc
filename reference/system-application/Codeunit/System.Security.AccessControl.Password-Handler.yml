### YamlMime:BusinessCentralApplicationObject
fqName: System.Security.AccessControl."Password Handler"
alId: ID 1284
namespace: System.Security.AccessControl
baseKind: Codeunit
kind: Codeunit
parent: N:Module::System_Application::Namespace::System.Security.AccessControl
langs:
- al
seeAlso:
- '[Codeunit](https://learn.microsoft.com/dynamics365/business-central/dev-itpro/developer/devenv-codeunit-object)'
objectProperties:
- name: Access
  value: Public
  promoted: false
- name: InherentEntitlements
  value: X
  promoted: false
- name: InherentPermissions
  value: X
  promoted: false
methods:
- syntax:
    signatures:
    - '[Obsolete(Replaced by GenerateSecretPassword with SecretText data type.,24.0)]'
    - '[NonDebuggable]'
    content: 'procedure GeneratePassword(): Text'
    return:
      description: The generated password.
      returnType:
        name: Text
        isExternal: true
  summary: >-
    Generates a password that consists of a number of characters defined by the <see cref="GetPasswordMinLength"></see> method,

    and meets the <see cref="IsPasswordStrong"></see> conditions.
  name: GeneratePassword
  obsoletion:
    state: pending
    reason: Replaced by GenerateSecretPassword with SecretText data type.
    version: "24.0"
  uid: M:Codeunit::System#Security#AccessControl#Password_Handler.GeneratePassword:Text
- syntax:
    signatures:
    - '[Obsolete(Replaced by GenerateSecretPassword with SecretText data type.,24.0)]'
    - '[NonDebuggable]'
    content: 'procedure GeneratePassword(Length: Integer): Text'
    parameters:
    - id: Length
      description: The number of characters in the password. Passwords must contain at least eight characters.
      parameterType:
        name: Integer
        isExternal: true
    return:
      description: The generated password.
      returnType:
        name: Text
        isExternal: true
  summary: Generates a password that consists of a user-defined number of characters, and meets the <see cref="IsPasswordStrong"></see> conditions.
  name: GeneratePassword
  obsoletion:
    state: pending
    reason: Replaced by GenerateSecretPassword with SecretText data type.
    version: "24.0"
  uid: M:Codeunit::System#Security#AccessControl#Password_Handler.GeneratePassword(Integer):Text
- syntax:
    signatures:
    - '[Obsolete(Replaced by IsPasswordStrong with SecretText data type.,24.0)]'
    - '[NonDebuggable]'
    content: 'procedure IsPasswordStrong(Password: Text): Boolean'
    parameters:
    - id: Password
      description: The password to check.
      parameterType:
        name: Text
        isExternal: true
    return:
      description: True if the password meets the conditions for strong passwords.
      returnType:
        name: Boolean
        isExternal: true
  summary: >-
    Check whether the password meets the following conditions:

    - Contains at least the number characters defined by <see cref="OnSetMinPasswordLength"></see> event, but it cannot be less than eight.

    - Contains uppercase and lowercase characters, digits, and special characters.

    - Does not contain sequences of characters. For example, aaa or 123.
  name: IsPasswordStrong
  obsoletion:
    state: pending
    reason: Replaced by IsPasswordStrong with SecretText data type.
    version: "24.0"
  uid: M:Codeunit::System#Security#AccessControl#Password_Handler.IsPasswordStrong(Text):Boolean
- syntax:
    content: 'procedure GenerateSecretPassword(): SecretText'
    return:
      description: The generated password.
      returnType:
        name: SecretText
        isExternal: true
  summary: >-
    Generates a password that consists of a number of characters defined by the <see cref="GetPasswordMinLength"></see> method,

    and meets the <see cref="IsPasswordStrong"></see> conditions.
  name: GenerateSecretPassword
  uid: M:Codeunit::System#Security#AccessControl#Password_Handler.GenerateSecretPassword:SecretText
- syntax:
    content: 'procedure GenerateSecretPassword(Length: Integer): SecretText'
    parameters:
    - id: Length
      description: The number of characters in the password. Passwords must contain at least eight characters.
      parameterType:
        name: Integer
        isExternal: true
    return:
      description: The generated password.
      returnType:
        name: SecretText
        isExternal: true
  summary: Generates a password that consists of a user-defined number of characters, and meets the <see cref="IsPasswordStrong"></see> conditions.
  name: GenerateSecretPassword
  uid: M:Codeunit::System#Security#AccessControl#Password_Handler.GenerateSecretPassword(Integer):SecretText
- syntax:
    content: 'procedure IsPasswordStrong(Password: SecretText): Boolean'
    parameters:
    - id: Password
      description: The password to check.
      parameterType:
        name: SecretText
        isExternal: true
    return:
      description: True if the password meets the conditions for strong passwords.
      returnType:
        name: Boolean
        isExternal: true
  summary: >-
    Check whether the password meets the following conditions:

    - Contains at least the number characters defined by <see cref="OnSetMinPasswordLength"></see> event, but it cannot be less than eight.

    - Contains uppercase and lowercase characters, digits, and special characters.

    - Does not contain sequences of characters. For example, aaa or 123.
  name: IsPasswordStrong
  uid: M:Codeunit::System#Security#AccessControl#Password_Handler.IsPasswordStrong(SecretText):Boolean
- syntax:
    content: 'procedure GetPasswordMinLength(): Integer'
    return:
      description: The minimum length of the password. Eight by default.
      returnType:
        name: Integer
        isExternal: true
  summary: Gets the minimum length of the password. It is defined by <see cref="OnSetMinPasswordLength"></see> event, but it cannot be less than eight.
  name: GetPasswordMinLength
  uid: M:Codeunit::System#Security#AccessControl#Password_Handler.GetPasswordMinLength:Integer
commentId: O:Codeunit::System#Security#AccessControl#Password Handler
summary: Provides the functionality for generating and validating passwords.
name: '"Password Handler"'
uid: O:Codeunit::System#Security#AccessControl#Password_Handler
